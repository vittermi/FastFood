openapi: 3.0.0
info:
  title: FastFood Backend API
  version: 1.0.0
  description: REST API for the FastFood project - University of Milan

servers:
  - url: http://localhost:5050/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        userType:
          type: string
          enum: [customer, restaurateur]
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
        - userType
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        userType:
          type: string
          enum: [customer, restaurateur]
    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
        currentPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
    LoginCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
    Restaurant:
      type: object
      properties:
        owner:
          type: string
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        vat:
          type: string
        hours:
          type: array
          items:
            $ref: "#/components/schemas/BusinessHours"
    BusinessHours:
      type: object
      properties:
        day:
          type: string
          enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday]
        open:
          type: string
          example: "09:00"
        close:
          type: string
          example: "21:00"
    RestaurantUpdate:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        vat:
          type: string
        hours:
          type: array
          items:
            $ref: "#/components/schemas/BusinessHours"
    Dish:
      type: object
      properties:
        _id:
          type: string
        restaurant:
          type: string
        baseDish:
          type: string
        name:
          type: string
        category:
          type: string
        ingredients:
          type: array
          items:
            type: string
        allergens:
          type: array
          items:
            type: string
        price:
          type: number
        tags:
          type: array
          items:
            type: string
        photo:
          type: string
    DishCreate:
      type: object
      required:
        - restaurant
        - price
      properties:
        restaurant:
          type: string
        baseDish:
          type: string
        name:
          type: string
        ingredients:
          type: array
          items:
            type: string
        category:
          type: string
        allergens:
          type: array
          items:
            type: string
        price:
          type: number
        tags:
          type: array
          items:
            type: string
        photo:
          type: string
    DishUpdate:
      type: object
      properties:
        name:
          type: string
        ingredients:
          type: array
          items:
            type: string
        category:
          type: string
        allergens:
          type: array
          items:
            type: string
        price:
          type: number
        tags:
          type: array
          items:
            type: string
        photo:
          type: string
    Order:
      type: object
      properties:
        _id:
          type: string
        restaurant:
          type: string
        customer:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        totalAmount:
          type: number
        status:
          type: string
          enum:
            [
              Ordered,
              In Preparation,
              In Delivery,
              Delivered,
              Cancelled,
            ]
        createdAt:
          type: string
          format: date-time
    OrderGetRest:
      type: object
      properties:
        _id:
          type: string
        restaurant:
          type: string
        customer:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItemPopulated"
        totalAmount:
          type: number
        status:
          type: string
          enum:
            [
              Ordered,
              In Preparation,
              In Delivery,
              Delivered,
              Cancelled,
            ]
        createdAt:
          type: string
          format: date-time
    OrderGetCustomer:
      type: object
      properties:
        _id:
          type: string
        restaurant:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
        customer:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItemPopulated"
        totalAmount:
          type: number
        status:
          type: string
          enum:
            [
              Ordered,
              In Preparation,
              In Delivery,
              Delivered,
              Cancelled,
            ]
        createdAt:
          type: string
          format: date-time
    OrderItem:
      type: object
      properties:
        dish:
          type: string
        quantity:
          type: integer
        priceAtOrder:
          type: number
    OrderItemPopulated:
      type: object
      properties:
        dish:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            price:
              type: number
        quantity:
          type: integer
        priceAtOrder:
          type: number
    OrderCreate:
      type: object
      required:
        - items
      properties:
        restaurantId:
          type: string
        items:
          type: array
          items:
            type: object
            required:
              - dish
              - quantity
            properties:
              dish:
                type: string
              quantity:
                type: integer
                minimum: 1
    OrderStatusUpdate:
      type: object
      required:
        - newStatus
      properties:
        newStatus:
          type: string
          enum:
            [
              pending,
              accepted,
              preparing,
              ready,
              completed,
              rejected,
              cancelled,
            ]
    Preference:
      type: object
      properties:
        customer:
          type: string
          description: Reference to the user ID (ObjectId)
        allergens:
          type: array
          items:
            type: string
          description: List of allergens the user is sensitive to
        paymentType:
          type: string
          enum: [cash, card]
          default: cash
          description: Preferred payment method
        cardDetails:
          $ref: "#/components/schemas/CardDetailsEncrypted"
        consents:
          $ref: "#/components/schemas/Consents"
          required: true
          description: User consents
    CardDetailsEncrypted:
      type: object
      properties:
        token:
          type: string
          description: Card token (from mock payment gateway)      
        cardHolder:
          type: string
          description: Name of the card holder
        cardNumber:
          type: string
          description: Card number (encrypted in storage)
        expiryDate:
          type: string
          description: Card expiration date (MM/YY)
    CardDetails:
      type: object
      properties:
        cardHolder:
          type: string
          description: Name of the card holder
        cardNumber:
          type: string
          description: Card number 
        expiryDate:
          type: string
          description: Card expiration date (MM/YY)
        cvv:
          type: number
          description: Card security code
    Consents:
      type: object
      required:
        - tos
        - privacy
      properties:
        tos:
          type: boolean
          description: Terms of Service consent (required)
        privacy:
          type: boolean
          description: Privacy Policy consent (required)
        offers:
          type: boolean
          default: false
          description: Marketing offers consent (optional)
    PreferenceCreate:
      type: object
      required:
        - allergens
        - paymentType
        - consents
      properties:
        allergens:
          type: array
          items:
            type: string
        paymentType:
          type: string
          enum: [cash, card]
        cardDetails:
          $ref: "#/components/schemas/CardDetails"
        consents:
          $ref: "#/components/schemas/Consents"
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login and receive JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCredentials"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout and clear refresh token
      responses:
        "200":
          description: Logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      responses:
        "200":
          description: New access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users:
    post:
      tags:
        - Users
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        "201":
          description: User registered
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Email or username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user information
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{id}:
    patch:
      tags:
        - Users
      summary: Update user info
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Duplicate email or username
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Users
      summary: Delete user and associated data (preferences)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /preferences:
    get:
      tags:
        - Preferences
      summary: Get user preferences
      description: Retrieves the preferences for the authenticated user
      responses:
        "200":
          description: User preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preference"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: No preferences found for this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Preferences
      summary: Create user preferences
      description: Creates new preferences for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - allergens
                - paymentType
                - consents
              properties:
                allergens:
                  type: array
                  items:
                    type: string
                paymentType:
                  type: string
                  enum: [cash, card]
                cardDetails:
                  $ref: "#/components/schemas/CardDetails"
                consents:
                  type: object
                  required:
                    - tos
                    - privacy
                  properties:
                    tos:
                      type: boolean
                    privacy:
                      type: boolean
                    offers:
                      type: boolean
      responses:
        "201":
          description: Preferences created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  preferences:
                    $ref: "#/components/schemas/Preference"
        "400":
          description: Invalid input or required consents missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Preferences
      summary: Update user preferences
      description: Updates existing preferences for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                allergens:
                  type: array
                  items:
                    type: string
                paymentType:
                  type: string
                  enum: [cash, card]
                cardDetails:
                  $ref: "#/components/schemas/CardDetails"
                consents:
                  type: object
                  properties:
                    tos:
                      type: boolean
                    privacy:
                      type: boolean
                    offers:
                      type: boolean
      responses:
        "200":
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  preferences:
                    $ref: "#/components/schemas/Preference"
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: No preferences found for this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Preferences
      summary: Delete user preferences
      description: Deletes the preferences for the authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Preferences deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: No preferences found for this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /restaurants:
    post:
      tags:
        - Restaurants
      summary: Create a new restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        "201":
          description: Restaurant created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - Invalid or expired token or not restaurant owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      tags:
        - Restaurants
      summary: Get all restaurants
      security: []
      parameters:
        - in: query
          name: owner
          schema:
            type: string
          description: Filter restaurants by owner ID
        - in: query
          name: name
          schema:
            type: string
          description: Filter restaurants by name (case-insensitive, partial match)
        - in: query
          name: address
          schema:
            type: string
          description: Filter restaurants by address (case-insensitive, partial match)
        - in: query
          name: openAt
          schema:
            type: string
          example: "monday,18:30"
          description: Filter restaurants open at a specific day and time
      responses:
        "200":
          description: List of restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /restaurants/{id}:
    get:
      tags:
        - Restaurants
      summary: Get a restaurant by ID
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Restaurant details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Restaurants
      summary: Update a restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestaurantUpdate"
      responses:
        "200":
          description: Restaurant updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - Invalid or expired token or not restaurant owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Restaurants
      summary: Delete a restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Restaurant deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - Invalid or expired token or not restaurant owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /restaurants/{restaurantId}/dishes:
    get:
      tags:
        - Dishes
      summary: Get all dishes for a restaurant
      security: []
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: query
          name: category
          schema:
            type: string
          description: Filter dishes by category 
        - in: query
          name: name
          schema:
            type: string
          description: Case-insensitive partial match for dish name
        - in: query
          name: minPrice
          schema:
            type: number
            format: float
          description: Minimum price filter
        - in: query
          name: maxPrice
          schema:
            type: number
            format: float
          description: Maximum price filter
      responses:
        "200":
          description: List of dishes for a restaurant
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Dish"
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /dishes:
    post:
      tags:
        - Dishes
      summary: Create a new dish
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DishCreate"
      responses:
        "201":
          description: Dish created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dish"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - Invalid or expired token or not restaurant owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: BaseDish not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /dishes/{id}:
    get:
      tags:
        - Dishes
      summary: Get a dish by ID
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dish details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dish"
        "404":
          description: Dish not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Dishes
      summary: Update a dish
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DishUpdate"
      responses:
        "200":
          description: Dish updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dish"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - Invalid or expired token or not restaurant owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Dish not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Dishes
      summary: Delete a dish
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dish deleted
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - Invalid or expired token or not restaurant owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Dish not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /dishes/templates:
    get:
      tags:
        - Dishes
      summary: Get template dishes
      description: Retrieve a paginated list of dish templates, optionally filtered by tag or type.
      security: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 25
          description: Number of results per page
        - in: query
          name: category
          schema:
            type: string
          description: Filter templates by dish category (e.g. Dessert, Main)
      responses:
        200:
          description: A paginated list of template dishes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        tags:
                          type: array
                          items:
                            type: string
                        type:
                          type: string
                        photo:
                          type: string
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
                      totalItems:
                        type: integer
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders:
    post:
      tags:
        - Orders
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreate"
      responses:
        "201":
          description: Order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - Invalid or expired token, not a customer, missing payment info, missing consents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Restaurant or dish not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/restaurant:
    get:
      tags:
        - Orders
      summary: Get all orders for the authenticated user
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderGetRest"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token or not a restaurant owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/customer:
    get:
      tags:
        - Orders
      summary: Get all orders for the authenticated customer
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderGetCustomer"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token or not a customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/statuses:
    get:
      tags:
        - Orders
      summary: Get all possible order statuses
      security: []
      responses:
        "200":
          description: List of order statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                    [
                      Ordered,
                      In Preparation,
                      In Delivery,
                      Delivered,
                      Cancelled,
                    ]
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/{id}/transitions:
    get:
      tags:
        - Orders
      summary: Get possible status transitions for an order
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: includeCancel
          schema:
            type: boolean
          example: false
          description: Include the CANCELLED transition (if available) when true
      responses:
        "200":
          description: Available transitions for the order
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: string
                  status:
                    type: string
                  transitions:
                    type: array
                    items:
                      type: string
                      enum:
                        [
                          Ordered,
                          In Preparation,
                          In Delivery,
                          Delivered,
                          Cancelled,
                        ]
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - invalid or expired token / not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                
  /orders/{id}/status:
    put:
      tags:
        - Orders
      summary: Update order status
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderStatusUpdate"
      responses:
        "200":
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid status transition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Invalid or expired token or not authorized to update status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /statistics/restaurant/{id}:
    get:
      tags:
        - Statistics
      summary: Get statistics for a restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: timeframe
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: monthly
          description: Time period for statistics
      responses:
        "200":
          description: Restaurant statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderCount:
                    type: integer
                  revenue:
                    type: number
                  popularDishes:
                    type: array
                    items:
                      type: object
                      properties:
                        dishId:
                          type: string
                        name:
                          type: string
                        count:
                          type: integer
                        revenue:
                          type: number
        "401":
          description: Unauthorized - missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - Invalid or expired token or not restaurant owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
